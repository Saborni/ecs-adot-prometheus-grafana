AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: ECS Fargate application

Parameters:
  ContainerImage:
    Type: String
    Description: Replace the docker image to run in the ECS service
    # Replace the default image with your instrumented application image
    Default: "0123456789.dkr.ecr.us-east-1.amazonaws.com/zap-app:1.0"
  OtelContainerImage:
    Type: String
    Description: ADOT Collector Image
    # Replace this with the public ADOT collector image or your customized collector image
    Default: "0123456789.dkr.ecr.us-east-1.amazonaws.com/aws-otel-collector:v0.44.0"
  VpcStackName:
    Type: String
    Description: Name of the VPC stack to import values from
    Default: "vpc-alb-stack"
  MonitoringStackName:
    Type: String
    Description: Name of the Monitoring stack to import values from
    Default: "monitoring-stack"

Resources:
  # ECS Cluster
  ECSCluster:
    Type: AWS::ECS::Cluster

  # Task Execution Role
  TaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      Policies:
        - PolicyName: LogGroupCreate1
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Sid: TaskExecutionRoleSid1
                Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                Resource: '*'

  # Task Role
  TaskRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSXRayDaemonWriteAccess
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: APSWriteAccess
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Sid: AmazonGrafanaPrometheusPolicyStatement1
                Effect: Allow
                Action:
                  - 'aps:RemoteWrite'
                Resource: '*'

  # CloudWatch Log Group
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /ecs/applog-${AWS::StackName}
      RetentionInDays: 7

  # Task Definition
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub ${AWS::StackName}-task
      RequiresCompatibilities:
        - FARGATE
      NetworkMode: awsvpc
      Cpu: '256'
      Memory: '512'
      ExecutionRoleArn: !GetAtt TaskExecutionRole.Arn
      TaskRoleArn: !GetAtt TaskRole.Arn
      ContainerDefinitions:
        - Name: zapp-app
          Image: !Ref ContainerImage
          PortMappings:
            - ContainerPort: 5000
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs
        - Name: aws-otel-collector
          Image: !Ref OtelContainerImage
          Command: 
            - "--config=/etc/ecs/ecs-amp-xray.yaml"
          Environment:
            - Name: AWS_PROMETHEUS_ENDPOINT
              Value: !Sub 
                - "${PrometheusEndpoint}api/v1/remote_write"
                - PrometheusEndpoint: 
                    Fn::ImportValue: !Sub ${MonitoringStackName}-PrometheusEndpoint
          PortMappings:
            - ContainerPort: 4317
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: "/ecs/zap-sc-aws-otel-collector"
              mode: "non-blocking"
              awslogs-create-group: "true"
              max-buffer-size: "25m"
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs              

  # ECS Service Security Group
  ServiceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for ECS service
      VpcId: 
        Fn::ImportValue: !Sub ${VpcStackName}-VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5000
          ToPort: 5000
          SourceSecurityGroupId: 
            Fn::ImportValue: !Sub ${VpcStackName}-ALBSecurityGroupId
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 10.100.0.0/16

  # ECS Service
  ECSService:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref ECSCluster
      ServiceName: !Sub ${AWS::StackName}-service
      TaskDefinition: !Ref TaskDefinition
      DesiredCount: 1
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          Subnets:
            - Fn::ImportValue: !Sub ${VpcStackName}-PrivateSubnet1
            - Fn::ImportValue: !Sub ${VpcStackName}-PrivateSubnet2
          AssignPublicIp: DISABLED
          SecurityGroups:
            - !Ref ServiceSecurityGroup
      LoadBalancers:
        - ContainerName: zapp-app
          ContainerPort: 5000
          TargetGroupArn: 
            Fn::ImportValue: !Sub ${VpcStackName}-TargetGroupArn

Outputs:
  ClusterName:
    Description: Name of the ECS Cluster
    Value: !Ref ECSCluster
    Export:
      Name: !Sub ${AWS::StackName}-ClusterName
  ServiceName:
    Description: Name of the ECS Service
    Value: !Ref ECSService
    Export:
      Name: !Sub ${AWS::StackName}-ServiceName
